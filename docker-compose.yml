services:
  # ==================== Usuarios API ====================
  users-api:
    container_name: users-api
    build:
      context: ./users
      dockerfile: Dockerfile
    ports:
      - "8080:8080"
    environment:
      - NODE_ENV=${NODE_ENV:-development}
      - DB_HOST=mysql-users-api
      - DB_PORT=3306
      - DB_SCHEMA=${DB_SCHEMA:-users}
      - DB_USER=${DB_USER:-root}
      - DB_PASS=${DB_PASS:-root}
      - JWT_SECRET=${JWT_SECRET:-79e0ac392376829ac249da1d85d35300fec2de6b8cabd2106023e0b29db49ef4372bc1b9e9611a4ad55e61a483ea18f8fa5649b9ec25fa1e954893eb40b5beff}
    env_file:
      - .env
    depends_on:
      mysql-users-api:
        condition: service_healthy
    networks:
      - microservices
    logging:
      driver: "json-file"
      options:
        max-size: "10m"
        max-file: "3"

  # ==================== MySQL para Usuarios ====================
  mysql-users-api:
    image: mysql:9.3
    container_name: mysql-users-api
    ports:
      - "3306:3306"
    environment:
      - MYSQL_ROOT_PASSWORD=${DB_PASS:-root}
      - MYSQL_DATABASE=${DB_SCHEMA:-users}
      - MYSQL_ROOT_HOST=%
    volumes:
      - mysql-users-api-data:/var/lib/mysql
    networks:
      - microservices
    healthcheck:
      test: ["CMD", "mysqladmin", "ping", "-h", "localhost"]
      interval: 30s
      timeout: 10s
      retries: 3
      start_period: 40s
    logging:
      driver: "json-file"
      options:
        max-size: "10m"
        max-file: "3"

  # ==================== Actividades API ====================
  activities-api:
    container_name: activities-api
    build:
      context: ./activities
      dockerfile: Dockerfile
    ports:
      - "8081:8080"
    environment:
      - NODE_ENV=${NODE_ENV:-development}
      - MONGODB_URL=mongodb://mongo-activities-api:27017
      - MONGO_DB=${MONGO_DB:-activities}
      - JWT_SECRET=${JWT_SECRET:-your_jwt_secret}
    env_file:
      - .env
    depends_on:
      mongo-activities-api:
        condition: service_healthy
    networks:
      - microservices
    logging:
      driver: "json-file"
      options:
        max-size: "10m"
        max-file: "3"

  # ==================== MongoDB para Actividades ====================
  mongo-activities-api:
    image: mongo:8.0
    container_name: mongo-activities-api
    ports:
      - "27017:27017"
    environment:
      - MONGO_INITDB_DATABASE=${MONGO_DB:-activities}
    volumes:
      - mongo-activities-api-data:/data/db
    networks:
      - microservices
    healthcheck:
      test: echo 'db.runCommand("ping").ok' | mongosh localhost:27017/test --quiet
      interval: 30s
      timeout: 10s
      retries: 3
      start_period: 40s
    logging:
      driver: "json-file"
      options:
        max-size: "10m"
        max-file: "3"

  # # ===================== =====================
  # search-api:
  #   container_name: search-api
  #   build:
  #     context: ./search
  #     dockerfile: Dockerfile
  #   ports:
  #     - "8082:8080"
  #   env_file:
  #     - .env
  #   depends_on:
  #     rabbit-search-api:
  #       condition: service_started
  #     mongo-search-api:
  #       condition: service_started
  #     memcached-search-api:
  #       condition: service_started
  #     solr-search-api:
  #       condition: service_started
  #   networks:
  #     - microservices

  # # ===================== Memcached =====================
  # mongo-search-api:
  #   image: mongo:7.0
  #   container_name: mongo-search-api
  #   restart: unless-stopped
  #   ports:
  #     - "27018:27017"
  #   environment:
  #     - MONGO_INITDB_DATABASE=${MONGO_DB:-demo}
  #   volumes:
  #     - ./mongo-init:/docker-entrypoint-initdb.d:ro
  #     - mongo-search-api-data:/data/db

  # # ===================== Memcached =====================
  # memcached-search-api:
  #   image: memcached:1.6-alpine
  #   container_name: memcached-search-api
  #   restart: unless-stopped
  #   command: ["-m", "64"]
  #   ports:
  #     - "11211:11211"
  #   networks:
  #     - microservices
  
  # # ===================== Rabbit =====================
  # rabbit-search-api:
  #   image: rabbitmq:3-management
  #   container_name: rabbit-search-api
  #   ports:
  #     - "5672:5672"    # AMQP
  #     - "15672:15672"  # Panel web
  #   environment:
  #     RABBITMQ_DEFAULT_USER: ${RABBITMQ_USER:-admin}
  #     RABBITMQ_DEFAULT_PASS: ${RABBITMQ_PASS:-admin}
  #   healthcheck:
  #     test: ["CMD", "rabbitmq-diagnostics", "ping"]
  #     interval: 10s
  #     timeout: 5s
  #     retries: 5
  #   networks:
  #     - microservices
  
  # # ===================== Solr search ==================
  # solr-search-api:
  #   image: solr:9
  #   container_name: solr-search-api
  #   ports:
  #     - "8983:8983"
  #   volumes:
  #     - solr_data:/var/solr
  #   command:
  #     - solr-precreate
  #     - demo
  #   networks:
  #     - microservices

  # ==================== Frontend ====================
  frontend:
    container_name: frontend
    build:
      context: ./frontend
      dockerfile: Dockerfile
      args:
        - VITE_USERS_URL=${VITE_USERS_URL:-http://users-api:8080}
        - VITE_ACTIVITIES_URL=${VITE_ACTIVITIES_URL:-http://activities-api:8080}
        - VITE_LOG_LEVEL=${VITE_LOG_LEVEL:-INFO}
    ports:
      - "80:80"
    environment:
      - VITE_USERS_URL=${VITE_USERS_URL:-http://localhost:8080}
      - VITE_ACTIVITIES_URL=${VITE_ACTIVITIES_URL:-http://localhost:8081}
      - VITE_LOG_LEVEL=${VITE_LOG_LEVEL:-INFO}
    depends_on:
      - users-api
      - activities-api
      # - search-api
    networks:
      - microservices
    healthcheck:
      test: ["CMD", "wget", "--quiet", "--tries=1", "--spider", "http://localhost/"]
      interval: 30s
      timeout: 10s
      retries: 3
      start_period: 40s
    logging:
      driver: "json-file"
      options:
        max-size: "10m"
        max-file: "3"

# ==================== Networks ====================
networks:
  microservices:
    driver: bridge

# ==================== Volumes ====================
volumes:
  mysql-users-api-data:
    driver: local
  mongo-activities-api-data:
    driver: local
  solr-search-api-data:
    driver: local
  mongo-search-api-data:
    driver: local
